/* the following pseudocode assumes C++ pointer syntax */
io_idle = TRUE; 
cpu_idle = TRUE;
sim_time = 0;
while (event list is not empty)
{
   Event *ev = select and remove the earliest event from the event list;
   int pid = ev->process_id;
   while (sim_time < ev->time)
      {sim_time = sim_time + 1; /* advance the simulation time */
        /* output “no event” to log */
   else
     {  
      switch (ev->type)
        {
           case ARRIVAL:
               /* create a new (simulated) process and place it in the Ready Queue */
              ...
               /* output “arrival event” to log */ 
              break;
          case PREEMPTION:
              /* put the current process in the Ready Queue */
              cpu_idle = TRUE;
              ...
	  /* output “preemtion event” to log */
              break;
          case IO_REQUEST:
               /* free CPU and move the current process into the I/O Queue */
              cpu_idle = TRUE;
              ...
	  /* output “I/O request event” to log */ 
              break;
          case IO_DONE:
              /* free I/O device and put the process in the Ready Queue */
              io_idle = TRUE;
              ...
	  /* output “IO done event” to log */
              break;
          case TERMINATION:
              /* free up the CPU, update statistics of the entire simulation */
              cpu_idle = TRUE;
              ...
	  /* output “termination event” to log */
              break;
       }
       if (cpu_idle and there are jobs to dispatch) 
        {
           cpu_idle = FALSE;
           dispatch_a_process();  /* remove the first process from the Ready Queue */
	/* output “job dispatch event” to log */	
         }
       if (io_idle and there are jobs waiting to perform I/O)
     {
        io_idle = FALSE;
        do_IO_operation (...); /* remove the first process from the I/O Queue */
        /* output “I/O operation event” to log */ 	
     } 
  } /* end switch */
}   /* end if         */
